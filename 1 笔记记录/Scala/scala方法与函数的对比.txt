http://blog.csdn.net/u012302488/article/details/50543661
具体的差异，总结为如下几点：

1.方法不能作为单独的表达式(先声明方法，在调用)，而存在（参数为空的方法除外），而函数可以。如：

========== 正确
//参数为空，没有（），则调用时候不能有（）
  def m = println("dsfdsf");

  m;

//方法参数如果不为空，则调用时不能没有（）；与函数的区别
  def mm(x:Int) = {}

  mm;   //错误

  //函数是特殊的对象，实现了FunctionN特质的对象，可以直接使用
  val f = (x:Int, y:Int) => x + y;

  f;  //正确


2.函数必须要有参数列表，而方法可以没有参数列表
//函数如果没有参数，必须有()，函数必须有参数列表
  val fun = () => println();

//方法可以没有参数列表，也不需要(),调用的时候不能有()
  def meth = println();


3.方法名是方法条用，而函数名只是代表函数对象本身

 这个比较容易理解。因为保存函数字面量的变量（又称为函数名或者函数值）本身就是实现了FunctionN特质的类的对象，要调用对象的apply

方法，就需要使用obj()的语法。所以函数名后面加括号才是调用函数。如下：


scala> val f1 = () => 1000
f1: () => Int = <function0>

//函数名只是代表函数对象本身，函数实现的是FunctionN特质的对象。
scala> f1;
f1: () => Int = <function0>

//函数名称后面带（）才是真正调用函数
scala>f1();
res6: Int = 1000

def metho = 10000;

//方法名是直接调用
metho;

4.在需要函数的地方，如果传递一个方法，会自动进行ETA展开（把方法转换为函数）

//定义一个函数类型的变量，并将方法m2赋值给函数，方法m2会被自动转换为函数（EAT展开）
  val f1:(Int) => Int = m2;

  def m2(value:Int):Int =
  {
    return value + 10;
  }
当然我们也可以强制把一个方法转换给函数，这就用到了scala中的部分应用函数：

val fl = m _

