http://blog.csdn.net/oopsoom/article/details/24773239


================ 泛型：类型的参数，都定义在[]中，限制参数类型，定义时生效 ================================
** 定义类的时候，作为类型参数定义。

协变 +A ， 类似Java中的(? extends T), 即可以用T和T的子类来替换T，里氏替换原则。
type List[+A] = scala.collection.immutable.List[A]  

不变 A
class MutableList[A]  extends AbstractSeq[A] 

逆变 -A， 只能用T的父类来替换T。是逆里氏替换原则。
trait OutputChannel[-Msg] {  
......  

================= 上界 和下界 ============================================
** Scala中, 界却用于泛型类中的方法的参数类型上
示例：
对于Queue中的append的类型参数直接写T, 会报错 (error: covariant type T occurs in contravariant position in type T of value x) 
这个地方比较复杂, 简单的说就是Scala内部实现是, 把类中的每个可以放类型的地方都做了分类(+, –, 中立), 具体分类规则不说了 
对于这里最外层类[+T]是协变, 但是到了方法的类型参数时, 该位置发生了翻转, 成为-逆变的位置, 所以你把T给他, 就会报错说你把一个协变类型放到了一个逆变的位置上

所以这里的处理的方法就是, 他要逆变, 就给他个逆变, 使用[U >: T], 其中T为下界, 表示T或T的超类, 这样Scala编译器就不报错了
class Queue[+T] (private val leading: List[T], private val trailing: List[T] )
{
  def append[U >: T](x: U) = new Queue[U](leading, x :: trailing) //使用T的超类U来替换T
}


U >: T   可以理解为 U的类型＞T的类型，则T是U的下界，即最小的类型，
 使用[U >: T], 其中T为下界, 表示T或T的超类

U <: T 可以理解为U的类型<T的类型，则T是U的上界，即最大的类型
使用[U <: T], 其中T为U的上界，表示T或者T的子类

============================================================================
1. 协变
[+T], covariant (or “flexible”) in its type parameter T，类似Java中的(? extends T), 即可以用T和T的子类来替换T，里氏替换原则。
2. 不变
不支持T的子类或者父类，只知支持T本身。
3.逆变
[-T], contravariant, 类似(? supers T) 只能用T的父类来替换T。是逆里氏替换原则。
上界：
只允许T的超类U来替换T。 [U >: T]
下界：
只允许T的子类U来替代T。 [U <: T]