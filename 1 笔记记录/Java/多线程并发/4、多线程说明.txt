JAVA中创建线程可以通过继承Thread类和实现Runnable接口来创建一个线程。
Runnable方式可以避免Thread 方式由于JAVA单继承特性带来的缺陷。Runnable的代码可以被多个线程(Thread实例)共享，适合于多个线程处理同一资源的情况。

Thread类是线程类，通过start方法实现对资源的调度，一个Tread就是一个独立的线程，多个Thread对象之间是跨线程资源通信。

Runnable只是可执行的逻辑，不具备线程资源调度功能，需要通过Thread类来实现线程的资源调度，
多个线程Thread对象可以执行同一个Runnable逻辑，达到对共享资源的并发请求

创建:新建一个线程对象,如Thread thd=new Thread()
就绪:创建了线程对象后,调用了线程的start()方法(此时线程知识进入了线程队列,等待获取CPU服务 ,具备了运行的条件,但并不一定已经开始运行了)
运行:处于就绪状态的线程,一旦获取了CPU资源，便进入到运行状态，开始执行run()方法里面的逻辑
终止:线程的run()方法执行完毕，或者线程调用了stop()方法,线程便进入终止状态
阻塞:一个正在执行的线程在某些情况系，由于某种原因而暂时让出了CPU资源，暂停了自己的执行，便进入了阻塞状态，如调用了sleep()方法

线程的分类
	用户线程:运行在前台，执行具有的任务程序的主线程，连接网络的子线程等都是用户线程
	守护线程:运行在后头，为其他前台线程服务。一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作。
		可以通过调用Thread类的setDaemon(true)方法来设置当前的线程为守护线程，该方法必须在start()方法之前调用，否则会抛出 IllegalThreadStateException异常。在守护线程中产生的新线程也是守护线程。不是所有的任务都可以分配给守护线程来执行，比如读写操作或者计算逻辑。